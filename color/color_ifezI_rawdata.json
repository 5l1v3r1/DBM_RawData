{
  "name": "color",
  "permissions": "NONE",
  "restriction": "1",
  "_id": "ifezI",
  "actions": [
    {
      "member": "1",
      "varName": "",
      "dataName": "${msg.guild.id}blacklist",
      "defaultVal": "false",
      "storage": "1",
      "varName2": "blacklisted",
      "name": "Store Member Data"
    },
    {
      "storage": "1",
      "varName": "blacklisted",
      "comparison": "1",
      "value": "true",
      "iftrue": "0",
      "iftrueVal": "",
      "iffalse": "3",
      "iffalseVal": "2",
      "name": "Check Variable"
    },
    {
      "channel": "0",
      "varName": "",
      "message": "Sorry ${member}, you're currently blacklisted from using this command!",
      "storage": "0",
      "varName2": "",
      "name": "Send Message"
    },
    {
      "name": "End Action Sequence"
    },
    {
      "storage": "3",
      "varName": "commands",
      "changeType": "1",
      "value": "1",
      "name": "Control Variable"
    },
    {
      "storage": "3",
      "varName": "commands",
      "name": "Save Variable"
    },
    {
      "info": "1",
      "infoIndex": "1",
      "storage": "1",
      "varName": "text",
      "name": "Store Command Params"
    },
    {
      "behavior": "0",
      "interpretation": "0",
      "code": "let text = tempVars(\"text\");\ntext = text.trim().replace(/\\s/g, '');",
      "storage": "1",
      "varName": "text",
      "name": "Run Script"
    },
    {
      "behavior": "1",
      "interpretation": "0",
      "code": "const isImageUrl = this.getWrexMods().require('is-image-url');\nconst isURL = this.getWrexMods().require('is-url');\nlet imageurl = tempVars(\"text\");\nif (isURL(imageurl)) {\nif (isImageUrl(imageurl)) {\n    (async () => {\n        const rgbHex = this.getWrexMods().require('rgb-hex');\n        const { getColorFromURL } = this.getWrexMods().require('color-thief-node');\n        let rgb = await getColorFromURL(imageurl);\n        let hex1 = rgbHex(rgb.join(\",\"));\n        const img = \"true\";\n        Actions.storeValue(img, 1, \"img\", cache);\n        Actions.storeValue(hex1, 1, \"text\", cache);\n        Actions.callNextAction(cache);\n    })()\n} else {\n    cache.index = cache.index + 2;\n    Actions.callNextAction(cache);\n}} else {\n    cache.index = cache.index + 2;\n    Actions.callNextAction(cache);\n}",
      "storage": "0",
      "varName": "",
      "name": "Run Script"
    },
    {
      "count": "5",
      "name": "Skip Actions"
    },
    {
      "name": "End Action Sequence"
    },
    {
      "behavior": "1",
      "interpretation": "0",
      "code": "//RGB Regex\nconst term = tempVars(\"text\");\nconst re = /^rgb[\\s+]?\\((:?\\d+\\.?\\d?%?)(,|-|\\/\\|)\\s?(:?\\d+\\.?\\d?%?)(,|-|\\/\\|)\\s?(:?\\d+\\.?\\d?%?)\\)/i\n//Thanks to CoolGuy#9889 for the RGB regex.\n\nif (re.test(term)) {\n    Actions.callNextAction(cache);\n} else {\n    cache.index = cache.index + 3;\n    Actions.callNextAction(cache);\n}",
      "storage": "0",
      "varName": "",
      "name": "Run Script"
    },
    {
      "behavior": "1",
      "interpretation": "0",
      "code": "//RGB color info\nconst convert = this.getWrexMods().require('color-convert');\n\nlet input = tempVars(\"text\").trim().replace('rgb(', '').replace(')', '');\ninput = input.replace('/\\s/g', '');\ninput = input.split(',');\n\ntry {\nlet color = {\n    \"css\" : convert.rgb.keyword(input),\n    \"hex\" : convert.rgb.hex(input),\n    \"hsl\" : convert.rgb.hsl(input),\n    \"cmyk\" : convert.rgb.cmyk(input),\n    \"rgb\" : input\n}\n    Actions.storeValue(color, 1, \"color\", cache);\n    Actions.callNextAction(cache);\n} catch (err) {\n    let random = \"true\";\n    Actions.storeValue(random, 1, \"random\", cache);\n    Actions.callNextAction(cache);\n}",
      "storage": "0",
      "varName": "",
      "name": "Run Script"
    },
    {
      "count": "11",
      "name": "Skip Actions"
    },
    {
      "name": "End Action Sequence"
    },
    {
      "behavior": "1",
      "interpretation": "0",
      "code": "//HEX Regex\nconst term = tempVars(\"text\");\nconst re = new RegExp(\"(^(#|0x)?([a-fA-F0-9]){6}$)|(^(#|0x)?([a-fA-F0-9]){3}$)\");\n\nif (re.test(term)) {\n    Actions.callNextAction(cache);\n} else {\n    cache.index = cache.index + 3;\n    Actions.callNextAction(cache);\n}",
      "storage": "0",
      "varName": "",
      "name": "Run Script"
    },
    {
      "behavior": "1",
      "interpretation": "0",
      "code": "//HEX color info\nconst convert = this.getWrexMods().require('color-convert');\nlet input = tempVars(\"text\").toUpperCase();\n\nwhile (true) {\n    if (input.charAt() == \"#\") {\n        input = input.substr(1);\n        break;\n    } else if (input.charAt() == \"0\" && input.charAt(1) == \"X\") {\n        input = input.substr(2);\n        break;\n    }\n    break;\n}\n\nif (input.length = \"3\") {\ninput = input.slice();\nconst pos1 = input[0];\nconst pos2 = input[1];\nconst pos3 = input[2];\ninput = pos1 + pos1 + pos2 + pos2 + pos3 + pos3;\n}\n\ntry {\nlet color = {\n    \"css\" : convert.hex.keyword(input),\n    \"rgb\" : convert.hex.rgb(input),\n    \"hsl\" : convert.hex.hsl(input),\n    \"cmyk\" : convert.hex.cmyk(input),\n    \"hex\" : input\n}\n\n    Actions.storeValue(color, 1, \"color\", cache);\n    Actions.callNextAction(cache);\n} catch (err) {\n    let random = \"true\";\n    Actions.storeValue(random, 1, \"random\", cache);\n    Actions.callNextAction(cache);\n}",
      "storage": "0",
      "varName": "",
      "name": "Run Script"
    },
    {
      "count": "7",
      "name": "Skip Actions"
    },
    {
      "name": "End Action Sequence"
    },
    {
      "behavior": "1",
      "interpretation": "0",
      "code": "//CSS regex\nconst term = tempVars(\"text\");\nconst re = new RegExp(\"^[a-zA-Z]+$\");\n\nif (re.test(term)) {\n    Actions.callNextAction(cache);\n} else {\n    cache.index = cache.index + 3;\n    Actions.callNextAction(cache)\n}",
      "storage": "0",
      "varName": "",
      "name": "Run Script"
    },
    {
      "behavior": "1",
      "interpretation": "0",
      "code": "//CSS Color info\nconst convert = this.getWrexMods().require('color-convert');\nlet input = tempVars(\"text\").toLowerCase();\n\ntry {\n    while (input.length < 2) {\n        if (input === \"r\") {\n            input = \"red\";\n            break;\n        } else if (input === \"g\") {\n            input = \"green\";\n            break;\n        } else if (input === \"b\") {\n            input = \"blue\";\n            break;\n        } else {\n            break;\n        }\n    }\n\n    var color = {\n        \"hex\": convert.keyword.hex(input),\n        \"rgb\": convert.keyword.rgb(input),\n        \"hsl\": convert.keyword.hsl(input),\n        \"cmyk\": convert.keyword.cmyk(input),\n        \"css\": input\n    };\n\n    Actions.storeValue(color, 1, \"color\", cache);\n    Actions.callNextAction(cache);\n} catch (err) {\n    let random = \"true\";\n    Actions.storeValue(random, 1, \"random\", cache);\n    Actions.callNextAction(cache);\n}",
      "storage": "0",
      "varName": "",
      "name": "Run Script"
    },
    {
      "count": "3",
      "name": "Skip Actions"
    },
    {
      "name": "End Action Sequence"
    },
    {
      "channel": "0",
      "varName": "",
      "message": "Error: Your input is incorrect, please try again.\nCorrect Formats:\n`#00FF00` OR `00FF00`\n`blue`\n`rgb(135, 206, 235)` OR `rgb(135,206,235)`\n`(image URL)`",
      "storage": "0",
      "varName2": "",
      "iffalse": "0",
      "iffalseVal": "",
      "name": "Send Message"
    },
    {
      "name": "End Action Sequence"
    },
    {
      "storage": "1",
      "varName": "img",
      "comparison": "1",
      "value": "\"true\"",
      "iftrue": "0",
      "iftrueVal": "",
      "iffalse": "3",
      "iffalseVal": "3",
      "name": "Check Variable"
    },
    {
      "title": "Dominant Color From Image",
      "author": "${member.displayName}",
      "color": "${tempVars(\"color\").hex}",
      "url": "",
      "authorIcon": "${msg.author.displayAvatarURL}",
      "authorUrl": "",
      "imageUrl": "",
      "thumbUrl": "https://dummyimage.com/100x100/${tempVars(\"color\").hex}.png&text=+",
      "timestamp": "false",
      "debug": "false",
      "text": "",
      "year": "",
      "month": "",
      "day": "",
      "hour": "",
      "minute": "",
      "second": "",
      "storage": "1",
      "varName": "embed",
      "name": "Create Embed Message"
    },
    {
      "count": "7",
      "name": "Skip Actions"
    },
    {
      "name": "End Action Sequence"
    },
    {
      "storage": "1",
      "varName": "random",
      "comparison": "1",
      "value": "\"true\"",
      "iftrue": "0",
      "iftrueVal": "",
      "iffalse": "3",
      "iffalseVal": "4",
      "name": "Check Variable"
    },
    {
      "behavior": "1",
      "interpretation": "1",
      "code": "//Random Color\nconst convert = this.getWrexMods().require('color-convert');\n\nconst input = \"000000\".replace(/0/g,function(){return (~~(Math.random()*16)).toString(16);})\n\nconst color = {\n    \"css\" : convert.hex.keyword(input),\n    \"rgb\" : convert.hex.rgb(input),\n    \"hsl\" : convert.hex.hsl(input),\n    \"cmyk\" : convert.hex.cmyk(input),\n    \"hex\" : input\n}\n\nActions.storeValue(color, 1, \"color\", cache);\nActions.callNextAction(cache);",
      "storage": "0",
      "varName": "",
      "name": "Run Script"
    },
    {
      "title": "Invalid color code. Random one assigned: ",
      "author": "${member.displayName}",
      "color": "${tempVars(\"color\").hex}",
      "url": "",
      "authorIcon": "${msg.author.displayAvatarURL}",
      "authorUrl": "",
      "imageUrl": "",
      "thumbUrl": "https://dummyimage.com/100x100/${tempVars(\"color\").hex}.png&text=+",
      "timestamp": "false",
      "debug": "false",
      "text": "",
      "year": "",
      "month": "",
      "day": "",
      "hour": "",
      "minute": "",
      "second": "",
      "storage": "1",
      "varName": "embed",
      "name": "Create Embed Message"
    },
    {
      "count": "2",
      "name": "Skip Actions"
    },
    {
      "name": "End Action Sequence"
    },
    {
      "title": "Color Info",
      "author": "${member.displayName}",
      "color": "${tempVars(\"color\").hex}",
      "url": "",
      "authorIcon": "${msg.author.displayAvatarURL}",
      "authorUrl": "",
      "imageUrl": "",
      "thumbUrl": "https://dummyimage.com/100x100/${tempVars(\"color\").hex}.png&text=+",
      "timestamp": "false",
      "debug": "false",
      "text": "",
      "year": "",
      "month": "",
      "day": "",
      "hour": "",
      "minute": "",
      "second": "",
      "storage": "1",
      "varName": "embed",
      "name": "Create Embed Message"
    },
    {
      "behavior": "1",
      "interpretation": "0",
      "code": "//Formatting colors\nlet rgb = JSON.stringify(tempVars(\"color\").rgb).slice(1, -1);\nrgb = rgb.replace(/['\"]+/g, '').split(',').join(', ');\n\n//Formatting cmyk\nlet cmyk = JSON.stringify(tempVars(\"color\").cmyk).slice(1, -1);\ncmyk = cmyk.split(',').join('%, ') + \"%\";\n\n//Formatting hsl\nlet str = JSON.stringify(tempVars(\"color\").hsl).slice(1, -1);\nh = str.split(',')[0];\ns = str.split(',')[1];\nl = str.split(',')[2];\nhsl = h + \", \" + s + \"%, \" + l + \"%\"\n\n//getting originals back\nlet css = JSON.stringify(tempVars(\"color\").css).slice(1, -1);\nlet hex = JSON.stringify(tempVars(\"color\").hex).slice(1, -1);\n\n//saving color again\nvar color = {\n    \"css\": css,\n    \"hex\": hex,\n    \"rgb\": rgb,\n    \"cmyk\": cmyk,\n    \"hsl\": hsl\n};\nActions.storeValue(color, 1, \"color\", cache);\nActions.callNextAction(cache);",
      "storage": "0",
      "varName": "rgb",
      "name": "Run Script"
    },
    {
      "storage": "1",
      "varName": "embed",
      "message": "**Name:** ${tempVars(\"color\").css}\n**Hex:** #${tempVars(\"color\").hex}\n**Rgb:** rgb(${tempVars(\"color\").rgb})\n**Hsl:** hsl(${tempVars(\"color\").hsl})\n**Cmyk:** cmyk(${tempVars(\"color\").cmyk})",
      "name": "Set Embed Description"
    },
    {
      "storage": "1",
      "varName": "embed",
      "channel": "0",
      "varName2": "",
      "storage3": "0",
      "varName3": "",
      "iffalse": "0",
      "iffalseVal": "",
      "name": "Send Embed Message"
    }
  ],
  "comType": "0"
}